{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Think\\\\Desktop\\\\react udemy\\\\React-udemy\\\\side efect - section 10\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useReducer, useContext } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\nimport Input from \"../UI/Input/Input\"; // moze da se pise izvan login komponente jer ne interaguje ni sa cim unutar login komponente\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  // drugi arg je f-ja koja ce pozvati akciju koja ce biti consumed by prvi arg\n  if (action.type === \"USER_INPUT\") {\n    // ono sto saljemo kao action ce biti objekat jer smo tako postavili u 54. liniji, a taj objekat ima type polje\n    return {\n      value: action.val,\n      isValid: action.val.includes(\"@\")\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    }; // za INPUT_BLUR ne menjamo value, pa ovde preuzimamo najnoviju vrednost pomocu state.value\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  //  const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    // initial state for emailState\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const authCtx = useContext(AuthContext);\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n    return () => {\n      console.log(\"EFFECT CLEANUP\");\n    };\n  }, []); // prednost izdvajanja isValid-a je ta sto se useEffect ne pokrece ako se samo vrednost input polja promeni, a validacija ostane ista (true)\n\n  const {\n    isValid: emailIsValid\n  } = emailState; // object destructuring - koristi se da bi se izvukao property iz objekta\n\n  const {\n    isValid: passwordIsValid\n  } = passwordState; // isValid property smestamo u alijas pod proizvoljnim nazivom, sto je ustvari konstanta\n\n  useEffect(() => {\n    // pomocu ove f-je se dugme za login disable-uje i enabluje direktno prilikom menjanja pass ili username-a\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity!\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500); // ceka se da korisnik prestane sa kucanjem najmanje 500ms kako bi tek onda proverio da li uneti username postoji,\n    //   a to se radi zbog optimizacije kako ne bi vrsio proveru posle svakog unetog karaktera\n\n    return () => {\n      // cleanup f-ja koja se pokrece svaki put pre izvrsenja ove gore f-je\n      console.log(\"CLEANUP\");\n      clearTimeout(identifier); // f-ja koja je ugradjena u browser\n    };\n  }, [emailIsValid, passwordIsValid]); // u dependecies se dodaje ono sto ide u sideEffect f-ji\n  //  pokrenuce sideEffect f-ju ako su emailIsValid ili passwordIsValid promenjeni\n\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    }); // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // )\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    }); // setFormIsValid(\n    //   event.target.value.trim().length > 6 && emailState.isValid\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    authCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"email\",\n        label: \"E-Mail\",\n        type: \"email\",\n        isValid: emailIsValid,\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        isValid: passwordIsValid,\n        value: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"yonMcXiljfUeEH9kmTVVglSCkh4=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","useReducer","useContext","Card","classes","Button","AuthContext","Input","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","authCtx","console","log","emailIsValid","passwordIsValid","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","actions","btn"],"sources":["C:/Users/Think/Desktop/react udemy/React-udemy/side efect - section 10/src/components/Login/Login.js"],"sourcesContent":["import React, { useEffect, useState, useReducer, useContext } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\nimport Input from \"../UI/Input/Input\";\n\n// moze da se pise izvan login komponente jer ne interaguje ni sa cim unutar login komponente\nconst emailReducer = (state, action) => {\n  // drugi arg je f-ja koja ce pozvati akciju koja ce biti consumed by prvi arg\n  if (action.type === \"USER_INPUT\") {\n    // ono sto saljemo kao action ce biti objekat jer smo tako postavili u 54. liniji, a taj objekat ima type polje\n    return { value: action.val, isValid: action.val.includes(\"@\") };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.includes(\"@\") }; // za INPUT_BLUR ne menjamo value, pa ovde preuzimamo najnoviju vrednost pomocu state.value\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  //  const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\", // initial state for emailState\n    isValid: null,\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const authCtx = useContext(AuthContext);\n\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n\n    return () => {\n      console.log(\"EFFECT CLEANUP\");\n    };\n  }, []);\n\n  // prednost izdvajanja isValid-a je ta sto se useEffect ne pokrece ako se samo vrednost input polja promeni, a validacija ostane ista (true)\n  const { isValid: emailIsValid } = emailState; // object destructuring - koristi se da bi se izvukao property iz objekta\n  const { isValid: passwordIsValid } = passwordState; // isValid property smestamo u alijas pod proizvoljnim nazivom, sto je ustvari konstanta\n\n  useEffect(() => {\n    // pomocu ove f-je se dugme za login disable-uje i enabluje direktno prilikom menjanja pass ili username-a\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity!\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500); // ceka se da korisnik prestane sa kucanjem najmanje 500ms kako bi tek onda proverio da li uneti username postoji,\n    //   a to se radi zbog optimizacije kako ne bi vrsio proveru posle svakog unetog karaktera\n    return () => {\n      // cleanup f-ja koja se pokrece svaki put pre izvrsenja ove gore f-je\n      console.log(\"CLEANUP\");\n      clearTimeout(identifier); // f-ja koja je ugradjena u browser\n    };\n  }, [emailIsValid, passwordIsValid]); // u dependecies se dodaje ono sto ide u sideEffect f-ji\n  //  pokrenuce sideEffect f-ju ako su emailIsValid ili passwordIsValid promenjeni\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({ type: \"USER_INPUT\", val: event.target.value });\n\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // )\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\n\n    // setFormIsValid(\n    //   event.target.value.trim().length > 6 && emailState.isValid\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    authCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <Input\n          id=\"email\"\n          label=\"E-Mail\"\n          type=\"email\"\n          isValid={emailIsValid}\n          value={emailState.value}\n          onChange={emailChangeHandler}\n          onBlur={validateEmailHandler}\n        />\n        <Input\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          isValid={passwordIsValid}\n          value={passwordState.value}\n          onChange={passwordChangeHandler}\n          onBlur={validatePasswordHandler}\n        />\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} >\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}